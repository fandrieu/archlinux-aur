#=====================================================================
# TOOLS
#=====================================================================

# args: lowerdir(s), rwdir, mountpoint
_mnt_overlay() {
    lower="${1}"
    rw="${2}"
    mnt="${3}"
    msg "::: Overlay mount ${lower} + ${rw} in ${mnt}"
    mkdir -p "${rw}/upper"
    mkdir -p "${rw}/work"
    mkdir -p "${mnt}"
    /bin/mount -t overlay -o lowerdir="${lower}",upperdir="${rw}/upper",workdir="${rw}/work" rootoverlay "${mnt}"
}

# args: source, mountpoint
_mnt_dev() {
    src="${1}"
    mnt="${2}"
    msg "::: Mounting device ${src} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount "${src}" "${mnt}"
}

# args: source, mountpoint
_mnt_bind() {
    src="${1}"
    mnt="${2}"
    msg "::: Binding ${src} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount --bind "${src}" "${mnt}"
}

# args: source, mountpoint
_mnt_move() {
    src="${1}"
    mnt="${2}"
    msg "::: Moving ${src} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount --move "${src}" "${mnt}"
}

# args: file, mountpoint
_mnt_loop() {
    src="${1}"
    mnt="${2}"
    msg "::: Mounting file ${src} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount -o loop "${src}" "${mnt}"
}

# args: size, mountpoint
_mnt_tmpfs() {
    size="${1}"
    mnt="${2}"
    msg "::: Mounting tmpfs, size=${size} to ${mnt}"
    mkdir -p "${mnt}"
    /bin/mount -t tmpfs -o "size=${size}" tmpfs "${mnt}"
}

# args: mountpoint
_mnt_rerw() {
    mnt="${1}"
    msg "::: Re-mounting rw ${mnt}"
    /bin/mount -o "remount,rw" "${mnt}"
}


#=====================================================================
# HOOK
#=====================================================================

run_hook () {
    #check if wanted
    if [ "x${rootoverlay}" = "x" ]; then
        return
    fi

    #defaults
    if [ "${rootoverlay}" == "y" ]; then
        rootoverlay=tmpfs
    fi
    if [ "x${tmpfs_size}" = "x" ]; then
        tmpfs_size="75%"
    fi
    #...
    
    #load modules
    /sbin/modprobe overlay
    if [ $? != 0 ]; then
        msg ":: rootoverlay: Could NOT load overlay module, bailing out"
        launch_interactive_shell
        return
    fi
    /sbin/modprobe loop
    /sbin/modprobe squashfs

    # set mount handler for rootoverlay
    mount_handler="rootoverlay_mount_handler"
    export mount_handler
}

#=====================================================================
# MOUNT HANDLER
#=====================================================================

rootoverlay_mount_handler() {
    newroot="${1}"
    
    if [ "${break}" = "pre" ]; then
        msg ":: '${break}' Break requested, type 'exit' to resume operation"
        launch_interactive_shell
    fi

    #-----------------------------------
    #overlay tree
    overlay_base="/overlay/"
    overlay_root="${overlay_base}root"
    overlay_rw="${overlay_base}rw"
    overlay_rwtype=""

    #=======================================================
    # Mount filesystems
    #=======================================================
    #TODO
    # replace "_mnt_loop" with versatile mount handler:
    # * enable passing options: fstype, rw, loop, copy2ram...
    # * check file systems
    # * use default_mount_handler ?

    #-----------------------------------
    #mount default root to "ro"
    msg ":: Mounting root..."
    mkdir -p ${overlay_root}
    default_mount_handler ${overlay_root}

    #-----------------------------------
    #mount "rw":
    msg ":: Mounting rw..."
    if [ "${rootoverlay}" == "tmpfs" ]; then
        #tmpfs
        overlay_rwtype="tmpfs"
        _mnt_tmpfs "${tmpfs_size}" "${overlay_rw}"

    elif [ -b $rootoverlay ]; then
        #block device
        overlay_rwtype="block"
        #FIXME: add options...
        _mnt_dev "${rootoverlay}" "${overlay_rw}"
    
    else
        #sub mount inside root

        #remount root rw
        _mnt_rerw "${overlay_root}"

        #source real path
        src="${overlay_root}/${rootoverlay#/}"

        #mount based on $src type
        if [ -d $src ]; then
            #dir: use this as rw
            overlay_rwtype="dir"
            overlay_rw="${src}"
            
            #FIXME: bind doesn't seem to work with overlay2: overlapped
            #overlay_rwtype="bind"
            #_mnt_bind "${src}" "${overlay_rw}"

        elif [ -f $src ]; then
            #file: loop
            overlay_rwtype="loop"
            _mnt_loop "${src}" "${overlay_rw}"

        else
            #error
            msg "ERROR: rootoverlay '${src}' not found, fallback to tmpfs"
            overlay_rwtype="tmpfs"
            _mnt_tmpfs "${tmpfs_size}" "${overlay_rw}"
            launch_interactive_shell
        fi
    fi

    #-----------------------------------
    #mount overlays
    overlay_mnt=""
    if [ "x${overlay}" == "x" ]; then
        overlay="/"
    fi
    msg ":: Mounting overlays..."
    for img in ${overlay/:/ }; do
        if [ "${img}" == "/" ]; then
            overlay_mnt="${overlay_mnt} ${overlay_root}"
            continue
        fi
        mnt="${overlay_base}${img##*/}"
        overlay_mnt="${overlay_mnt} ${mnt}"
        src="${overlay_root}/${img#/}"

        #FIXME: copy2ram
        if [ "${copy2rw}" = "y" ] && [ "${overlay_rwtype}" == "tmpfs" ]; then
            src_rw="${overlay_rw}/${img##*/}"
            msg -n "::: Copying image file to ${src_rw}..."
            /bin/cp "${src}" "${src_rw}"
            msg "done."
            src="$src_rw"
        fi

        _mnt_loop ${src} ${mnt}
    done
    
    
    #=======================================================
    # Build overlay new root
    #=======================================================
    msg ":: Creating root overlay..."

    #-----------------------------------
    #overlay merge: root + overlays + rw
    overlay_lower=""
    for mnt in ${overlay_mnt}; do
        if [ "x${overlay_lower}" != "x" ]; then
            overlay_lower="${overlay_lower}:"
        fi
        overlay_lower="${overlay_lower}${mnt}"
    done
    if [ "${break}" = "overlay" ]; then
        msg ":: '${break}' Break requested, type 'exit' to resume operation"
        launch_interactive_shell
    fi
    _mnt_overlay "${overlay_lower}" "${overlay_rw}" "${newroot}"

    #-----------------------------------
    #move overlay mount points into the live system
    if [ "${overlay_rwtype}" != "dir" ]; then
        #if rw is a dir in root: no link
        _mnt_move "${overlay_rw}" "${newroot}${overlay_rw}"
    fi
    for mnt in ${overlay_mnt}; do
        _mnt_move "${mnt}" "${newroot}${mnt}"
    done

    
    #=======================================================
    # Fix new root
    #=======================================================
    msg ":: Setting overlay root..."

    #-----------------------------------
    #fix etc/fstab: remove root, swap & tmpfs if possible
    sed -e '/ \/ /d' -e '/ swap /d' -i ${newroot}/etc/fstab
    if [ "${overlay_rwtype}" == "tmpfs" ]; then
        sed -e '/ tmpfs /d' -i ${newroot}/etc/fstab
        #set journald storage
        echo "Storage=volatile" >> ${newroot}/etc/systemd/journald.conf
        rm -r ${newroot}/var/log/journal
    fi

TOOD=<<ENDTODO
    #-----------------------------------
    #avoid root fs remount/check in rc.sysinit...    
    if [ ! -e /run/initramfs/root-fsck ]; then
        msg "WARNING: missing 'fsck' hook, root fs will NOT be checked"
        msg "WARNING: please add fsck to HOOKS in mkinitcpio.conf"
        echo 0 > /run/initramfs/root-fsck
    fi
    #arch FCK
    cp /run/initramfs/root-fsck /run/initramfs/fsck-root

    #-----------------------------------
    #fix etc/rc.sysinit: checkable root is now "/overlay/rw", not "/"
    #no root check if tmpfs
    if [ "${overlay_rwtype}" != "tmpfs" -a  "${overlay_rwtype}" != "dir" ]; then
        rm /run/initramfs/*fsck*
        sed -e 's/\(mount -o remount\(,ro\)* \/\)$/\1overlay\/rw/' \
            -i ${newroot}/etc/rc.sysinit
    fi
ENDTODO

    #-----------------------------------
    #build remountrw
    file="${newroot}/bin/remountrw"
    echo \#!/bin/sh >$file
    echo mount -o remount,rw ${overlay_root} >>$file
    chmod 0700 $file

    #build remountro
    file="${newroot}/bin/remountro"
    echo \#!/bin/sh >$file
    echo mount -o remount,ro ${overlay_root} >>$file
    chmod 0700 $file
    
    if [ "${break}" = "post" ]; then
        msg ":: '${break}' Break requested, type 'exit' to resume operation"
        launch_interactive_shell
    fi
}

# vim:ft=sh:ts=4:sw=4:et:
